@page "/findoutquiz"
@inject IJSRuntime JSRuntime;

<style>
    .floating {
        animation-name: floatinganimation;
        animation-iteration-count: infinite;
        animation-duration: 3s;
        animation-timing-function: ease;
    }

    @@keyframes floatinganimation {
        0% {
            margin-top: 20px;
        }

        50% {
            margin-top: 30px;
        }

        100% {
            margin-top: 20px;
        }
    }
</style>
<div style="text-align:center">
    <div style="display:@(quizCompleted? "none":"inline-block")">
        <span style="font-size:30px;font-family:'Century Gothic',Tahoma">#@Questions.ToArray()[currentQuestion-1].QNum - @Questions.ToArray()[currentQuestion-1].QText</span>
        <br />
        <br />


        <div @onclick="(() => sendResults(Questions.ToArray()[currentQuestion-1].Option1.Type))" style="background-color:#f1f1f1;border-radius:8px;margin:10px;padding:40px;padding-right:100px;padding-left:100px;text-align:center;cursor:pointer;border-left:3px solid #f1f1f1;border-right:@((Questions.ToArray()[currentQuestion-1].Option1.Type == Results[currentQuestion-1])? "3px solid dodgerblue":"3px solid #f1f1f1")" class="shadow">
            <span style="font-weight:800;color:dimgray;font-family:'Century Gothic',Tahoma;text-align:center;">
                Option A:
            </span>
            <span style="display:inline;z-index:2;text-wrap:normal;color:dimgray;font-family:'Century Gothic',Tahoma">
                @(Questions.ToArray()[currentQuestion-1].Option1.Text)
            </span>
        </div>
        <div @onclick="(() => sendResults(Questions.ToArray()[currentQuestion-1].Option2.Type))" style="background-color:#f1f1f1;border-radius:8px;margin:10px;padding:40px;padding-right:100px;padding-left:100px;text-align:center;cursor:pointer;border-left:3px solid #f1f1f1;border-right:@((Questions.ToArray()[currentQuestion-1].Option2.Type == Results[currentQuestion-1])? "3px solid dodgerblue":"3px solid #f1f1f1")" class="shadow">
            <span style="font-weight:800;color:dimgray;font-family:'Century Gothic',Tahoma;text-align:center;">
                Option B:
            </span>
            <span style="display:inline;z-index:2;text-wrap:normal;color:dimgray;font-family:'Century Gothic',Tahoma">
                @(Questions.ToArray()[currentQuestion-1].Option2.Text)
            </span>
        </div>
        <div @onclick="(() => sendResults(Questions.ToArray()[currentQuestion-1].Option3.Type))" style="background-color:#f1f1f1;border-radius:8px;margin:10px;padding:40px;padding-right:100px;padding-left:100px;text-align:center;cursor:pointer;border-left:3px solid #f1f1f1;border-right:@((Questions.ToArray()[currentQuestion-1].Option3.Type == Results[currentQuestion-1])? "3px solid dodgerblue":"3px solid #f1f1f1")" class="shadow">
            <span style="font-weight:800;color:dimgray;font-family:'Century Gothic',Tahoma;text-align:center;">
                Option C:
            </span>
            <span style="display:inline;z-index:2;text-wrap:normal;color:dimgray;font-family:'Century Gothic',Tahoma">
                @(Questions.ToArray()[currentQuestion-1].Option3.Text)
            </span>
        </div>
        <div @onclick="(() => sendResults(Questions.ToArray()[currentQuestion-1].Option4.Type))" style="background-color:#f1f1f1;border-radius:8px;margin:10px;padding:40px;padding-right:100px;padding-left:100px;text-align:center;cursor:pointer;border-left:3px solid #f1f1f1;border-right:@((Questions.ToArray()[currentQuestion-1].Option4.Type == Results[currentQuestion-1])? "3px solid dodgerblue":"3px solid #f1f1f1")" class="shadow">
            <span style="font-weight:800;color:dimgray;font-family:'Century Gothic',Tahoma;text-align:center;">
                Option D:
            </span>
            <span style="display:inline;z-index:2;text-wrap:normal;color:dimgray;font-family:'Century Gothic',Tahoma">
                @(Questions.ToArray()[currentQuestion-1].Option4.Text)
            </span>
        </div>
        <div style="text-align:center">
            <div style="display:inline-block">
                <input class="btn btn-primary" type="button" @onclick="prevQuestion" value="Prev Question" disabled="@((currentQuestion > 1)? false: true)" />
                <input class="btn btn-primary" type="button" @onclick="nextQuestion" value="@((currentQuestion < (Questions.Count+1))? "Next Question":"Finish Quiz")" />
                
            </div>
        </div>
    </div>

    <div style="background-color:#ffffff;width:80%;padding:30px;border-radius:8px;margin:20px;text-align:left;border-top:3px solid red;display:@(quizCompleted? "inline-block":"none")" class="shadow floating">
        <span style="color:dimgray;font-size:30px;font-family:'Century Gothic',Tahoma;font-weight:700">
            You are a @(TopRated)!
        </span>
    </div>
    <br />
    <input type="button" class="btn btn-primary" value="Back to Menu" onclick="location.href='/menu'" style="display:inline-block;width:200px;margin-top:10px" />
</div>




@code {
    public int currentQuestion = 1;
    public string TopRated = "None";
    public bool quizCompleted = false;
    public void nextQuestion()
    {
        if(currentQuestion < Questions.Count)
        {
            currentQuestion++;
            this.StateHasChanged();
        }
        else
        {
            BFTypeSorts[] bFTypeSorts = new BFTypeSorts[4] { new BFTypeSorts() { Num = Results.Count(x => x == BearType.Black), Type = BearType.Black },new BFTypeSorts() { Num = Results.Count(x => x == BearType.Brown), Type = BearType.Brown },new BFTypeSorts() { Num = Results.Count(x => x == BearType.Panda), Type = BearType.Panda },new BFTypeSorts() { Num = Results.Count(x => x == BearType.Polar), Type = BearType.Polar } };
            switch(bFTypeSorts.OrderByDescending(x => x.Num).ToArray()[0].Type)
            {
                case BearType.Black:
                    TopRated = "Black Bear";
                    break;
                case BearType.Brown:
                    TopRated = "Brown Bear";
                    break;
                case BearType.Polar:
                    TopRated = "Polar Bear";
                    break;
                case BearType.Panda:
                    TopRated = "Panda Bear";
                    break;
            }
            quizCompleted = true;
            this.StateHasChanged();
            CompletedAddCookie();
        }

    }
    public void prevQuestion()
    {
        currentQuestion--;
        this.StateHasChanged();
    }
    public void sendResults(BearType type)
    {
        Results[currentQuestion - 1] = type;
    }
    public BearType[] Results = new BearType[7] { BearType.None, BearType.None, BearType.None, BearType.None, BearType.None, BearType.None, BearType.None };
    public List<BFQuestion> Questions = new List<BFQuestion>()
    {
        new BFQuestion()
        {
            QNum = 1,
            QText = "Do you like the cold?",
            Option1 = new BFAnswer() { Text = "I thrive in the cold", Type = BearType.Polar },
            Option2 = new BFAnswer() { Text = "I love the cold", Type = BearType.Panda },
            Option3 = new BFAnswer() { Text = "It's okay...", Type = BearType.Black },
            Option4 = new BFAnswer() { Text = "I don't like the cold", Type = BearType.Brown }
        },
        new BFQuestion()
        {
            QNum = 2,
            QText = "What are your opinions on sleeping?",
            Option1 = new BFAnswer() { Text = "I sleep 14hrs a day", Type = BearType.Panda },
            Option2 = new BFAnswer() { Text = "I barely sleep", Type = BearType.Polar },
            Option3 = new BFAnswer() { Text = "Sleep is okay in perfect amounts", Type = BearType.Black },
            Option4 = new BFAnswer() { Text = "Sleep is just eh", Type = BearType.Brown }
        },
        new BFQuestion()
        {
            QNum = 3,
            QText = "How well do you eat?",
            Option1 = new BFAnswer() { Text = "Junk food all the time", Type = BearType.Panda },
            Option2 = new BFAnswer() { Text = "I love eating, but only healthy foods", Type = BearType.Brown },
            Option3 = new BFAnswer() { Text = "I love fruits and veggies", Type = BearType.Black },
            Option4 = new BFAnswer() { Text = "I like everything", Type = BearType.Polar }
        },
        new BFQuestion()
        {
            QNum = 4,
            QText = "What pleases you the most?",
            Option1 = new BFAnswer() { Text = "Mountain slips", Type = BearType.Brown },
            Option2 = new BFAnswer() { Text = "Tundra", Type = BearType.Polar },
            Option3 = new BFAnswer() { Text = "Deciduous Forest", Type = BearType.Black },
            Option4 = new BFAnswer() { Text = "Coniferous Forest", Type = BearType.Panda }
        },
        new BFQuestion()
        {
            QNum = 5,
            QText = "What would your friends describe you as?",
            Option1 = new BFAnswer() { Text = "I don't have friends", Type = BearType.Polar },
            Option2 = new BFAnswer() { Text = "Laidback", Type = BearType.Panda },
            Option3 = new BFAnswer() { Text = "Responsible", Type = BearType.Black },
            Option4 = new BFAnswer() { Text = "Unique but kinda weird at the same time", Type = BearType.Brown }
        },
        new BFQuestion()
        {
            QNum = 6,
            QText = "Pick out a word that stands out to you.",
            Option1 = new BFAnswer() { Text = "Courage ", Type = BearType.Black },
            Option2 = new BFAnswer() { Text = "Curiosity ", Type = BearType.Panda },
            Option3 = new BFAnswer() { Text = "Adventure ", Type = BearType.Brown },
            Option4 = new BFAnswer() { Text = "Independence ", Type = BearType.Polar }
        },
        new BFQuestion()
        {
            QNum = 7,
            QText = "What’s your favorite drink?",
            Option1 = new BFAnswer() { Text = "Water", Type = BearType.Polar },
            Option2 = new BFAnswer() { Text = "Tea", Type = BearType.Panda },
            Option3 = new BFAnswer() { Text = "Milkshake ", Type = BearType.Black },
            Option4 = new BFAnswer() { Text = "Orange Juice", Type = BearType.Brown }
        },
    };
    public class BFQuestion
    {
        public int QNum { get; set; }
        public string QText { get; set; }
        public BFAnswer Option1 { get; set; }
        public BFAnswer Option2 { get; set; }
        public BFAnswer Option3 { get; set; }
        public BFAnswer Option4 { get; set; }
    }
    public class BFAnswer
    {
        public string Text { get; set; }
        public BearType Type { get; set; }
    }
    public class BFTypeSorts
    {
        public BearType Type { get; set; }
        public int Num { get; set; }
    }
    public enum BearType
    {
        None,
        Polar,
        Panda,
        Brown,
        Black
    }
    public async void CompletedAddCookie()
    {

        await JSRuntime.InvokeAsync<string>("blazorExtensions.WriteCookie", "activityCompleted-findout", "true", 100);
        this.StateHasChanged();
        EXPSystem();
    }
    public async void EXPSystem()
    {
        var result = await JSRuntime.InvokeAsync<string>("blazorExtensions.ReadCookie");
        var cookies = result.Split("; ");
        PolarHab.Data.RMessenger.OnChangeProgressBar((double)cookies.ToList().Where(x => x.Contains("quizCompleted") || x.Contains("activityCompleted")).ToList().Count / 15);
        this.StateHasChanged();
    }
}

