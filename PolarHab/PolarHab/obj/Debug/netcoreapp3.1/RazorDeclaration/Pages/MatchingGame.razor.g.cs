#pragma checksum "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\Pages\MatchingGame.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "634e500a9cb12b04335e9c2b0d7e77dbb3d62a46"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PolarHab.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using PolarHab;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using PolarHab.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/matching")]
    public partial class MatchingGame : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 269 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\Pages\MatchingGame.razor"
       
    public GameState currentState { get; set; }
    public int[] cardsSelected = new int[2] {0, 0};
    public int numberOfTurns = 0;

    public CardType[] allCards = new CardType[20]
    {
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry at the Lake again.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry at the Lake again.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Inukshuk Snowy Scene.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Inukshuk Snowy Scene.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Inukshuk (2).jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Inukshuk (2).jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Inukshuk Pool.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Inukshuk Pool.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry Wide.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry Wide.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry On Rock.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry On Rock.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "longpolarbear2.png", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "longpolarbear2.png", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry at the Lake.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Henry at the Lake.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Ganuk Snowy Scene.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Ganuk Snowy Scene.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Eddy Snowy Scene.jpg", Classes = "shadow"},
        new CardType(){ CardState = CardState.NotSelected, ImageSRC = "Eddy Snowy Scene.jpg", Classes = "shadow"},
    };

    public enum Images
    {
        None,
        HenryAtLake,
        InukshukSnowy,
        Inukshuk,
        InukshukPool,
        HenryWide,
        HenryOnRock,
        LongPolarBear,
        HenryAtTheLake,
        GanukSnowyScene,
        EddySnowScene
    }
    public enum GameState
    {
        FirstCard,
        SecondCard,
        Animation
    }
    public enum CardState
    {
        NotSelected,
        Selected,
        Completed
    }
    public void FlipCard(int indexofpassedin)
    {
        if (allCards[indexofpassedin].CardState != CardState.Completed)
        {
            switch (currentState)
            {
                case GameState.FirstCard:
                    cardsSelected[0] = indexofpassedin;
                    currentState = GameState.SecondCard;
                    allCards[indexofpassedin].CardState = CardState.Selected;
                    this.StateHasChanged();
                    break;
                case GameState.SecondCard:
                    cardsSelected[1] = indexofpassedin;
                    allCards[indexofpassedin].CardState = CardState.Selected;
                    this.StateHasChanged();
                    CheckSelection();
                    break;
            }
        }

    }
    public async void CheckSelection()
    {
        currentState = GameState.Animation;
        if(cardsSelected[0] != cardsSelected[1])
        {
            numberOfTurns++;
            if(allCards[cardsSelected[0]].CardState == allCards[cardsSelected[1]].CardState && allCards[cardsSelected[0]].ImageSRC == allCards[cardsSelected[1]].ImageSRC)
            {
                await JSRuntime.InvokeVoidAsync("PlayAudioFile", "images/matchingmatch.wav");
                allCards[cardsSelected[0]].CardState = CardState.Completed;
                allCards[cardsSelected[1]].CardState = CardState.Completed;
                currentState = GameState.FirstCard;
                this.StateHasChanged();
                if(allCards.Where(x => x.CardState == CardState.NotSelected || x.CardState == CardState.Selected).ToList().Count < 1)
                {
                    CompletedAddCookie();
                }
            }
            else
            {
                await Task.Delay(2000);
                allCards[cardsSelected[0]].CardState = CardState.NotSelected;
                allCards[cardsSelected[1]].CardState = CardState.NotSelected;
                currentState = GameState.FirstCard;
                this.StateHasChanged();
            }
        }
        else
        {
            numberOfTurns++;
            allCards[cardsSelected[0]].CardState = CardState.NotSelected;
            currentState = GameState.FirstCard;
            this.StateHasChanged();
        }

    }
    public class CardType
    {
        public CardState CardState { get; set; }
        public string ImageSRC { get; set; }
        public string Classes { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        var iterationsofrandomness = new Random().Next(100, 300);
        var randomnumgen = new Random();
        for(int i = iterationsofrandomness;i > 0; i--)
        {
            var pos1 = randomnumgen.Next(0, 20);
            var pos2 = randomnumgen.Next(0, 20);
            var pos1value = allCards[pos1];
            var pos2value = allCards[pos2];
            allCards[pos1] = pos2value;
            allCards[pos2] = pos1value;
        }
    }
    public async void CompletedAddCookie()
    {

        await JSRuntime.InvokeAsync<string>("blazorExtensions.WriteCookie", "activityCompleted-matching", "true", 100);
        this.StateHasChanged();
        EXPSystem();
    }
    public async void EXPSystem()
    {
        var result = await JSRuntime.InvokeAsync<string>("blazorExtensions.ReadCookie");
        var cookies = result.Split("; ");
        PolarHab.Data.RMessenger.OnChangeProgressBar((double)cookies.ToList().Where(x => x.Contains("quizCompleted") || x.Contains("activityCompleted")).ToList().Count / 15);
        this.StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
