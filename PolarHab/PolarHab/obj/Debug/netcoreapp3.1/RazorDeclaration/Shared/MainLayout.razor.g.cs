#pragma checksum "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\Shared\MainLayout.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0df9c1fdd663c16e4f24fd24a7ffc46e7688f56e"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PolarHab.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using PolarHab;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using PolarHab.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    public partial class MainLayout : LayoutComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 56 "C:\Users\djree\source\repos\HackathonProject\PolarHab\PolarHab\Shared\MainLayout.razor"
      
    public double progress = 0;
    public bool allCompleted = false;
    public string addedProgessClasses = "noaddedprogress";
    public async void TransferData()
    {
        var db1 = new PolarHab.DbAssets.OldActivityContext();
        var db2 = new PolarHab.DbAssets.ActivityContext();
        var allentries = db2.Questions.ToList();
        foreach(var entry in allentries)
        {
            if (!db1.Questions.Contains(entry))
            {
                db1.Questions.Add(entry);
            }
            
        }
        db1.SaveChanges();
    }
    public async void EXPSystem()
    {
        var result = await JSRuntime.InvokeAsync<string>("blazorExtensions.ReadCookie");
        var cookies = result.Split("; ");
        progress = (double)cookies.ToList().Where(x => x.Contains("quizCompleted") || x.Contains("activityCompleted")).ToList().Count / 13;
        if(progress >= 1)
        {
            allCompleted = true;
        }
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        EXPSystem();
        PolarHab.Data.RMessenger.ChangeProgressBar += async (double progressPassed) =>
        {
            await InvokeAsync(async() =>
            {
                if(progress != progressPassed)
                {
                    JSRuntime.InvokeVoidAsync("PlayAudioFile", "images/progressgained.wav");
                    progress = progressPassed;
                    addedProgessClasses = "addedprogress";
                    this.StateHasChanged();
                    await Task.Delay(6000);
                    addedProgessClasses = "noaddedprogress";
                    if(progress >= 1)
                    {
                        allCompleted = true;
                        JSRuntime.InvokeVoidAsync("PlayAudioFile", "images/progress100percent.wav");
                    }
                    this.StateHasChanged();
                }

            });


        };

    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
